name: CD Pipeline

on:
  push:
    branches:
      - develop
      - main
    tags:
      - 'v*'

env:
  TERRAFORM_DIR: terraform/minikube-setup
  SCRIPTS_DIR: scripts

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment name
        id: envname
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            echo "env=development" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "env=staging" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "env=unknown" >> $GITHUB_OUTPUT
          fi 

      - name: Debug PATH and Minikube
        run: |
         echo $PATH
         ls -l /usr/local/bin/minikube
         /usr/local/bin/minikube version || echo "minikube failed"

      - name: Start Minikube (if not already running)
        run: |
          export PATH=$PATH:/usr/local/bin
          minikube status || minikube start --driver=docker   

      - name: Enable Minikube Ingress
        run: |
          export PATH=$PATH:/usr/local/bin
          minikube addons enable ingress

      - name: Ensure Namespace Exists
        run: |
          NS=${{ steps.envname.outputs.env }}
          if [[ "$NS" != "unknown" ]]; then
            kubectl get namespace $NS 2>/dev/null || kubectl create namespace $NS
          fi

      - name: Ensure Secret Exists (optional)
        run: |
          NS=${{ steps.envname.outputs.env }}
          SECRET_NAME=mongo-url-secret
          if [[ "$NS" != "unknown" ]]; then
            kubectl get secret $SECRET_NAME -n $NS 2>/dev/null \
              || kubectl create secret generic $SECRET_NAME -n $NS --from-literal=uri='your-mongo-uri'
          fi

      - name: Setup Terraform
        run: |
          cd $TERRAFORM_DIR
          terraform init
          # If you use TF for other resources, not for namespaces/secrets
          terraform apply -auto-approve

      - name: Deploy with Helm
        run: |
          chmod +x $SCRIPTS_DIR/deploy-${{ steps.envname.outputs.env }}.sh
          $SCRIPTS_DIR/deploy-${{ steps.envname.outputs.env }}.sh
